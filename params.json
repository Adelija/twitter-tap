{"name":"Twitter Tap","tagline":"A python tool for collecting tweets in mongoDB using the search API","body":"Twitter Tap\r\n===========\r\n\r\nCollect tweets to a mongoDB using the twitter search API.\r\n\r\nAbout\r\n=====\r\n\r\nTwitter Tap is a python tool that connects to the Twitter API and issues\r\ncalls to the search endpoint using a query that the user has entered.\r\nThe tool follows all the **next_results** links (with the corresponding\r\n**max_id**) so that all results are collected. When all the\r\n**next_results** links are exhausted the query is repeated using the\r\n**since_id** of the latest tweet from the results of the first query\r\nand follows all the **next_results** links again. The latest\r\n**since_id** is also stored in the database for each distinct query\r\n(query, geolocation, language), so that when the tool is restarted you\r\nwill still only receive unique tweets.\r\n\r\nTweets are stored into a mongoDB, which has a unique index on the Tweet\r\nID so that there is no duplication of data if more than 1 query is\r\nexecuted simultaneously.\r\n\r\nThere is an arbitrary wait time before each API call so that the rate\r\nlimit is not reached. The default value of 2 seconds makes sure that\r\nthere are no more than 450 requests per 15 minutes as is the rate limit\r\nof the search endpoint for authenticating with the app (not the user).\r\n\r\nThe tool can be run from the command line or be run as a daemon using\r\nsupervisor (recommended). A sample supervisord.conf script is included\r\nwith the tool.\r\n\r\nInstallation\r\n============\r\n\r\nInstall Twitter Tap using `pip <http://www.pip-installer.org/>`__\r\n\r\n.. code:: bash\r\n\r\n    pip install twitter-tap\r\n\r\nOr, if you want the current code\r\n\r\n.. code:: bash\r\n\r\n    git clone git://github.com/janezkranjc/twitter-tap.git\r\n    cd twitter-tap\r\n    python setup.py install\r\n\r\nBefore you start\r\n================\r\n\r\nPlease follow this link https://apps.twitter.com/ and create a twitter\r\napp. You will need the consumer key and consumer secret to access the\r\ntwitter API.\r\n\r\nUsing twitter tap\r\n=================\r\n\r\nRun Twitter Tap in the command line like this.\r\n\r\n.. code:: bash\r\n\r\n    tap\r\n\r\nShow help text\r\n~~~~~~~~~~~~~~\r\n\r\n.. code:: bash\r\n\r\n    tap -h\r\n\r\nExecuting a query\r\n~~~~~~~~~~~~~~~~~\r\n\r\nTo execute a query you must provide a **query**, the **consumer secret**\r\nand either the **consumer key** or the access token. Consumer key and\r\nsecret can be obtained at the http://apps.twitter.com/ website, while\r\nthe access token will be obtained when first connecting with the key and\r\nsecret.\r\n\r\n.. code:: bash\r\n\r\n    tap --consumer-key CONSUMERKEY --consumer-secret CONSUMERSECRET -q \"miley cyrus\" -v DEBUG\r\n\r\nRunning as a daemon\r\n===================\r\n\r\nTo run Tap as a daemon you are encouraged to use supervisor. (Doesn't\r\nwork natively under windows. You should use cygwin.)\r\n\r\nHere is a sample supervisord.conf file for running tap\r\n\r\n.. code:: bash\r\n\r\n    ; Sample supervisor config file for daemonizing the twitter search to mongodb software\r\n\r\n    [inet_http_server]          ; inet (TCP) server disabled by default\r\n    port=127.0.0.1:9001         ; (ip_address:port specifier, *:port for all iface)\r\n    username=manorastroman      ; (default is no username (open server))\r\n    password=kingofthedragonmen ; (default is no password (open server))\r\n\r\n    [supervisord]\r\n    stopsignal=INT\r\n    logfile=supervisord.log      ; (main log file;default $CWD/supervisord.log)\r\n    logfile_maxbytes=50MB        ; (max main logfile bytes b4 rotation;default 50MB)\r\n    logfile_backups=10           ; (num of main logfile rotation backups;default 10)\r\n    loglevel=info                ; (log level;default info; others: debug,warn,trace)\r\n    pidfile=supervisord.pid      ; (supervisord pidfile;default supervisord.pid)\r\n    nodaemon=false               ; (start in foreground if true;default false)\r\n    minfds=1024                  ; (min. avail startup file descriptors;default 1024)\r\n    minprocs=200                 ; (min. avail process descriptors;default 200)\r\n\r\n    [rpcinterface:supervisor]\r\n    supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\r\n\r\n    [supervisorctl]\r\n    serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket\r\n    username=manorastroman       ; should be same as http_username if set\r\n    password=kingofthedragonmen  ; should be same as http_password if set\r\n\r\n    [program:tap]\r\n    command=tap --consumer-key CONSUMERKEY --consumer-secret CONSUMERSECRET -q \"janez kranjc\" -v DEBUG\r\n    stdout_logfile=tap.log\r\n    stderr_logfile=tap_err.log\r\n    autostart=true\r\n    autorestart=true\r\n    startsecs=10\r\n    stopwaitsecs=10\r\n\r\nAfterwards you can start the daemon like this (you must be in the same\r\nfolder as supervisord.conf or your supervisord.conf must be /etc/)\r\n\r\n.. code:: bash\r\n\r\n    supervisord\r\n\r\nOpen your browser to http://127.0.0.1:9001 to see the status of the\r\ndaemon. By default the username is manorastroman and the password\r\nkingofthedragonmen.\r\n\r\nAlternatively you can see the status like this\r\n\r\n.. code:: bash\r\n\r\n    supervisorctl status\r\n\r\nOr see the tail of the logs (log file locations can be setup in\r\nsupervisord.conf)\r\n\r\n.. code:: bash\r\n\r\n    supervisorctl tail tap\r\n\r\nWhenever you feel like shutting it down\r\n\r\n.. code:: bash\r\n\r\n    supervisorctl shutdown\r\n\r\nUseful Links\r\n============\r\n\r\n-  **MongoDB** https://www.mongodb.org/\r\n-  **Twitter developers** https://dev.twitter.com/\r\n-  **Supervisor** http://supervisord.org/\r\n\r\n","google":"UA-2921908-14","note":"Don't delete this file! It's used internally to help with page regeneration."}